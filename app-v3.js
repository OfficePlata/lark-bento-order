document.addEventListener('DOMContentLoaded', function() {
    // --- ‚ñº‚ñº‚ñº ÊúÄÁµÇË®≠ÂÆöÈ†ÖÁõÆ ‚ñº‚ñº‚ñº ---
    const MAIN_LIFF_ID = "2008199273-3ogv1YME";
    // „ÄêÈáçË¶Å„Äë„Éá„Éó„É≠„Ç§„Åó„ÅüGAS„ÅÆURL„Çí„Åì„Åì„Å´Ë®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ
    const GAS_API_URL = "https://script.google.com/macros/s/AKfycbzhB4RmJU8tiQ-etpSIeZklM6R0uBdL4rLfupoL_Ax9wxc_bNdUepLcSw8dWeNEcraW/exec";
    // --- ‚ñ≤‚ñ≤‚ñ≤ ÊúÄÁµÇË®≠ÂÆöÈ†ÖÁõÆ ‚ñ≤‚ñ≤‚ñ≤ ---

    // „ÄêËøΩÂä†„Äë„É¢„Éê„Ç§„É´„Éá„Éê„ÉÉ„Ç∞Áî®„ÅÆ„É≠„Ç∞Ë°®Á§∫„Ç®„É™„Ç¢
    let debugLogArea = null;
    
    function createDebugLogArea() {
        if (debugLogArea) return;
        
        debugLogArea = document.createElement('div');
        debugLogArea.id = 'debug-log-area';
        debugLogArea.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 200px;
            background: rgba(0,0,0,0.9);
            color: #00ff00;
            font-family: monospace;
            font-size: 10px;
            padding: 10px;
            overflow-y: auto;
            z-index: 10000;
            display: none;
        `;
        document.body.appendChild(debugLogArea);
        
        // „Éá„Éê„ÉÉ„Ç∞„Ç®„É™„Ç¢„ÅÆË°®Á§∫/ÈùûË°®Á§∫Âàá„ÇäÊõø„Åà
        const toggleButton = document.createElement('button');
        toggleButton.textContent = 'DEBUG';
        toggleButton.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            z-index: 10001;
            background: red;
            color: white;
            border: none;
            padding: 5px 10px;
            font-size: 12px;
        `;
        toggleButton.onclick = () => {
            debugLogArea.style.display = debugLogArea.style.display === 'none' ? 'block' : 'none';
        };
        document.body.appendChild(toggleButton);
    }
    
    function debugLog(message) {
        console.log(message);
        
        if (!debugLogArea) createDebugLogArea();
        
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.textContent = `[${timestamp}] ${message}`;
        debugLogArea.appendChild(logEntry);
        debugLogArea.scrollTop = debugLogArea.scrollHeight;
        
        // ÊúÄÂ§ß100Ë°å„Åæ„Åß‰øùÊåÅ
        while (debugLogArea.children.length > 100) {
            debugLogArea.removeChild(debugLogArea.firstChild);
        }
    }

    // „ÄêËøΩÂä†„Äë„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÅÆÂº∑Âåñ
    window.addEventListener('error', function(e) {
        debugLog(`‚ùå JavaScript Error: ${e.message} at ${e.filename}:${e.lineno}`);
    });
    
    window.addEventListener('unhandledrejection', function(e) {
        debugLog(`‚ùå Unhandled Promise Rejection: ${e.reason}`);
    });

    let menuData = [];
    let cart = [];
    let currentItem = null;
    const loadingIndicator = document.getElementById('loading-indicator');
    const menuContainer = document.getElementById('menu-container');
    const modalBackdrop = document.getElementById('modal-backdrop');
    const confirmOrderButton = document.getElementById('confirm-order-button');
    const addToCartButton = document.getElementById('add-to-cart-button');
    const modalCloseButton = document.getElementById('modal-close-button');
    const decreaseQtyButton = document.getElementById('decrease-qty');
    const increaseQtyButton = document.getElementById('increase-qty');

    debugLog("üöÄ „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÂßã");
    debugLog(`üì± User Agent: ${navigator.userAgent}`);
    debugLog(`üåê URL: ${window.location.href}`);

    liff.init({ liffId: MAIN_LIFF_ID })
        .then(() => {
            debugLog("‚úÖ LIFFÂàùÊúüÂåñÊàêÂäü");
            debugLog(`üîê „É≠„Ç∞„Ç§„É≥Áä∂ÊÖã: ${liff.isLoggedIn()}`);
            debugLog(`üì± LIFF„ÇØ„É©„Ç§„Ç¢„É≥„Éà: ${liff.isInClient()}`);
            debugLog(`üîß LIFF OS: ${liff.getOS()}`);
            debugLog(`üìä LIFFË®ÄË™û: ${liff.getLanguage()}`);
            debugLog(`üéØ LIFFÁâàÊú¨: ${liff.getVersion()}`);
            
            fetchMenuData();
        })
        .catch((err) => { 
            debugLog(`‚ùå LIFFÂàùÊúüÂåñÂ§±Êïó: ${err.message}`);
            console.error("LIFF init failed.", err);
            loadingIndicator.textContent = "LIFFÂàùÊúüÂåñÂ§±Êïó";
        });

    async function fetchMenuData() {
        if (GAS_API_URL === "YOUR_FINAL_GAS_URL_HERE") {
            debugLog("‚ùå GAS_API_URL„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì");
            loadingIndicator.textContent = "GAS_API_URL„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ";
            return;
        }
        try {
            debugLog(`üì° „É°„Éã„É•„Éº„Éá„Éº„ÇøÂèñÂæóÈñãÂßã: ${GAS_API_URL}`);
            const response = await fetch(GAS_API_URL);
            debugLog(`üì° „É°„Éã„É•„ÉºÂèñÂæó„É¨„Çπ„Éù„É≥„Çπ status: ${response.status}`);
            
            if (!response.ok) {
                throw new Error(`„Çµ„Éº„Éê„ÉºÂøúÁ≠î„Ç®„É©„Éº: ${response.status}`);
            }
            
            const responseText = await response.text();
            debugLog(`üì° „É°„Éã„É•„Éº„É¨„Çπ„Éù„É≥„Çπ„ÉÜ„Ç≠„Çπ„ÉàÈï∑: ${responseText.length}ÊñáÂ≠ó`);
            
            menuData = JSON.parse(responseText);
            debugLog(`üì° „Éë„Éº„ÇπÊ∏à„Åø„É°„Éã„É•„Éº„Éá„Éº„Çø: ${menuData.length}‰ª∂`);
            
            if (menuData.error) {
                throw new Error(menuData.error);
            }
            displayMenu(menuData);
            loadingIndicator.style.display = 'none';
            debugLog("‚úÖ „É°„Éã„É•„ÉºË°®Á§∫ÂÆå‰∫Ü");
        } catch (error) {
            debugLog(`‚ùå „É°„Éã„É•„ÉºÂèñÂæóÂ§±Êïó: ${error.message}`);
            console.error("Fetch menu failed:", error);
            loadingIndicator.textContent = `„É°„Éã„É•„ÉºË™≠ËæºÂ§±Êïó: ${error.message}`;
        }
    }

    function displayMenu(items) {
        menuContainer.innerHTML = '';
        items.forEach(item => {
            const itemElement = document.createElement('div');
            itemElement.className = 'grid-item';
            itemElement.innerHTML = `
                <img src="${item.imageUrl || 'https://placehold.co/300x240/eee/ccc?text=No+Image'}" alt="${item.name}">
                <div class="item-info">
                    <p class="item-name">${item.name}</p>
                    <p class="item-price">¬•${item.price_regular}</p>
                </div>
            `;
            itemElement.addEventListener('click', () => openModal(item));
            menuContainer.appendChild(itemElement);
        });
    }

    function openModal(item) {
        debugLog(`üõí ÂïÜÂìÅË©≥Á¥∞„É¢„Éº„ÉÄ„É´Èñã„Åè: ${item.name}`);
        currentItem = item;
        document.getElementById('modal-name').textContent = item.name;
        document.getElementById('modal-description').textContent = item.description || '';
        document.getElementById('modal-image').src = item.imageUrl || 'https://placehold.co/400x240/eee/ccc?text=No+Image';

        const optionSelector = document.getElementById('option-selector');
        optionSelector.innerHTML = '';
        const options = [
            { key: 'regular', name: 'ÊôÆÈÄöÁõõ„Çä', price: item.price_regular },
            { key: 'large', name: 'Â§ßÁõõ„Çä', price: item.price_large },
            { key: 'small', name: 'Â∞èÁõõ„Çä', price: item.price_side_only },
            { key: 'side_only', name: '„Åä„Åã„Åö„ÅÆ„Åø', price: item.price_side_only },
        ];
        options.forEach((opt, index) => {
            if (opt.price !== undefined) {
                const checked = index === 0 ? 'checked' : '';
                optionSelector.innerHTML += `<div class="option-item"><input type="radio" id="opt_${opt.key}" name="price_option" value="${opt.key}" data-price="${opt.price}" ${checked}><label for="opt_${opt.key}">${opt.name} (¬•${opt.price})</label></div>`;
            }
        });
        document.getElementsByName('price_option').forEach(r => r.addEventListener('change', updateModalPrice));
        document.getElementById('quantity').textContent = '1';
        updateModalPrice();
        modalBackdrop.classList.add('visible');
    }

    function closeModal() {
        debugLog("üõí ÂïÜÂìÅË©≥Á¥∞„É¢„Éº„ÉÄ„É´Èñâ„Åò„Çã");
        modalBackdrop.classList.remove('visible');
    }

    function updateModalPrice() {
        const selOpt = document.querySelector('input[name="price_option"]:checked');
        const qty = parseInt(document.getElementById('quantity').textContent, 10);
        if (selOpt) {
            document.getElementById('modal-price').textContent = parseInt(selOpt.dataset.price, 10) * qty;
        }
    }

    decreaseQtyButton.addEventListener('click', () => {
        let qty = parseInt(document.getElementById('quantity').textContent, 10);
        if (qty > 1) {
            document.getElementById('quantity').textContent = --qty;
            updateModalPrice();
        }
    });
    increaseQtyButton.addEventListener('click', () => {
        let qty = parseInt(document.getElementById('quantity').textContent, 10);
        document.getElementById('quantity').textContent = ++qty;
        updateModalPrice();
    });

    addToCartButton.addEventListener('click', () => {
        const selOptEl = document.querySelector('input[name="price_option"]:checked');
        const qty = parseInt(document.getElementById('quantity').textContent, 10);
        if (!currentItem || !selOptEl) return;
        const selOpt = {
            key: selOptEl.value,
            name: document.querySelector(`label[for="opt_${selOptEl.value}"]`).textContent.split(' ')[0],
            price: parseInt(selOptEl.dataset.price, 10)
        };
        cart.push({ id: currentItem.id, name: currentItem.name, quantity: qty, option: selOpt, totalPrice: selOpt.price * qty });
        debugLog(`üõí „Ç´„Éº„Éà„Å´ËøΩÂä†: ${currentItem.name} x ${qty}`);
        updateCartView();
        closeModal();
    });

    function updateCartView() {
        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        const totalPrice = cart.reduce((sum, item) => sum + item.totalPrice, 0);
        document.getElementById('cart-item-count').textContent = totalItems;
        document.getElementById('cart-total-price').textContent = totalPrice;
        confirmOrderButton.disabled = cart.length === 0;
        debugLog(`üõí „Ç´„Éº„ÉàÊõ¥Êñ∞: ${totalItems}ÁÇπ / ${totalPrice}ÂÜÜ`);
    }

    // „ÄêÂº∑Âåñ„ÄësubmitOrderÈñ¢Êï∞„Å´„É¢„Éê„Ç§„É´ÂØæÂøú„Éá„Éê„ÉÉ„Ç∞„ÇíËøΩÂä†
    async function submitOrder() {
        if (cart.length === 0) {
            debugLog("‚ùå „Ç´„Éº„Éà„ÅåÁ©∫„Åß„Åô");
            return;
        }
        
        debugLog("üöÄ Ê≥®ÊñáÂá¶ÁêÜÈñãÂßã");
        
        // „Éú„Çø„É≥„ÇíÁÑ°ÂäπÂåñ„Åó„Å¶„É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã„Å´„Åô„Çã
        confirmOrderButton.disabled = true;
        confirmOrderButton.textContent = 'Ê≥®ÊñáÂá¶ÁêÜ‰∏≠...';

        try {
            // „É≠„Ç∞„Ç§„É≥Á¢∫Ë™ç
            debugLog(`üîê „É≠„Ç∞„Ç§„É≥Áä∂ÊÖãÁ¢∫Ë™ç: ${liff.isLoggedIn()}`);
            if (!liff.isLoggedIn()) {
                debugLog("‚ùå „É¶„Éº„Ç∂„Éº„Åå„É≠„Ç∞„Ç§„É≥„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„Å´„É™„ÉÄ„Ç§„É¨„ÇØ„Éà");
                liff.login();
                return; 
            }
            
            // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅÆÂèñÂæó
            debugLog("üë§ „É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç£„Éº„É´ÂèñÂæóÈñãÂßã");
            const profile = await liff.getProfile();
            const userId = profile.userId;
            const displayName = profile.displayName;
            debugLog(`üë§ „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæóÊàêÂäü: ${displayName} (${userId})`);

            // Ê≥®ÊñáË©≥Á¥∞„ÅÆÊ∫ñÂÇô
            let orderDetailsText = '';
            cart.forEach(item => {
                orderDetailsText += `${item.name} (${item.option.name}) x ${item.quantity}\n`;
            });
            const totalPrice = cart.reduce((sum, item) => sum + item.totalPrice, 0);
            
            // Ê≥®Êñá„Éá„Éº„Çø„ÅÆÊ∫ñÂÇôÔºàÊñ∞„Åó„ÅÑÂΩ¢ÂºèÔºâ
            const orderData = {
                orderId: new Date().getTime().toString() + Math.random().toString(36).substring(2, 8),
                userId: userId,
                displayName: displayName,
                orderDetails: orderDetailsText.trim(),
                totalPrice: totalPrice
            };
            
            debugLog(`üì¶ ÈÄÅ‰ø°„Åô„ÇãÊ≥®Êñá„Éá„Éº„Çø: ${JSON.stringify(orderData)}`);

            // LINE„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°ÔºàÂèØËÉΩ„Å™Â†¥Âêà„ÅÆ„ÅøÔºâ
            await sendLineMessageIfPossible(orderData);

            // GAS„Å∏„ÅÆ„É™„ÇØ„Ç®„Çπ„ÉàÈÄÅ‰ø°
            debugLog(`üì° GAS„Å´„É™„ÇØ„Ç®„Çπ„ÉàÈÄÅ‰ø°ÈñãÂßã: ${GAS_API_URL}`);
            
            const fetchOptions = {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            };
            
            debugLog(`üì° „É™„ÇØ„Ç®„Çπ„Éà„Ç™„Éó„Ç∑„Éß„É≥: ${JSON.stringify(fetchOptions)}`);
            
            let response;
            try {
                debugLog(`üì° fetchÂÆüË°åÈñãÂßã...`);
                response = await fetch(GAS_API_URL, fetchOptions);
                debugLog(`üì° fetchÂÆüË°åÂÆå‰∫Ü`);
            } catch (fetchError) {
                debugLog(`‚ùå fetch„Ç®„É©„Éº: ${fetchError.message}`);
                debugLog(`‚ùå fetch„Ç®„É©„Éº„Çø„Ç§„Éó: ${fetchError.name}`);
                debugLog(`‚ùå fetch„Ç®„É©„Éº„Çπ„Çø„ÉÉ„ÇØ: ${fetchError.stack}`);
                throw new Error(`„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº: ${fetchError.message}`);
            }

            debugLog(`üì° GAS„É¨„Çπ„Éù„É≥„Çπ status: ${response.status}`);
            debugLog(`üì° GAS„É¨„Çπ„Éù„É≥„Çπ ok: ${response.ok}`);
            debugLog(`üì° GAS„É¨„Çπ„Éù„É≥„Çπ headers: ${JSON.stringify([...response.headers.entries()])}`);

            // „É¨„Çπ„Éù„É≥„Çπ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó
            let responseText;
            try {
                debugLog(`üì° „É¨„Çπ„Éù„É≥„Çπ„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæóÈñãÂßã...`);
                responseText = await response.text();
                debugLog(`üì° „É¨„Çπ„Éù„É≥„Çπ„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæóÂÆå‰∫Ü`);
            } catch (textError) {
                debugLog(`‚ùå „É¨„Çπ„Éù„É≥„Çπ„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó„Ç®„É©„Éº: ${textError.message}`);
                throw new Error(`„É¨„Çπ„Éù„É≥„ÇπË™≠„ÅøÂèñ„Çä„Ç®„É©„Éº: ${textError.message}`);
            }
            
            debugLog(`üì° GAS„É¨„Çπ„Éù„É≥„Çπ„ÉÜ„Ç≠„Çπ„Éà: "${responseText}"`);
            debugLog(`üì° „É¨„Çπ„Éù„É≥„Çπ„ÉÜ„Ç≠„Çπ„ÉàÈï∑: ${responseText.length}ÊñáÂ≠ó`);

            // „É¨„Çπ„Éù„É≥„Çπ„ÅåÁ©∫„Åß„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
            if (!responseText || responseText.trim() === '') {
                throw new Error('GAS„Åã„ÇâÁ©∫„ÅÆ„É¨„Çπ„Éù„É≥„Çπ„ÅåËøî„Åï„Çå„Åæ„Åó„Åü');
            }

            // JSON„Éë„Éº„Çπ„ÇíË©¶Ë°åÔºà„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞‰ªò„ÅçÔºâ
            let result;
            try {
                result = JSON.parse(responseText);
                debugLog(`üì° „Éë„Éº„ÇπÊ∏à„Åø„É¨„Çπ„Éù„É≥„Çπ: ${JSON.stringify(result)}`);
            } catch (parseError) {
                debugLog(`‚ùå JSON„Éë„Éº„Çπ„Ç®„É©„Éº: ${parseError.message}`);
                debugLog(`‚ùå „Éë„Éº„Çπ„Å´Â§±Êïó„Åó„Åü„É¨„Çπ„Éù„É≥„Çπ: "${responseText}"`);
                
                // „É¨„Çπ„Éù„É≥„Çπ„ÅÆÊúÄÂàù„ÅÆ100ÊñáÂ≠ó„ÇíË°®Á§∫„Åó„Å¶„Éá„Éê„ÉÉ„Ç∞
                const preview = responseText.substring(0, 100);
                throw new Error(`GAS„Åã„Çâ„ÅÆ‰∏çÊ≠£„Å™JSON„É¨„Çπ„Éù„É≥„Çπ: "${preview}..."`);
            }

            // „Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ„ÅÆÁ¢∫Ë™ç
            if (result.status === 'error') {
                debugLog(`‚ùå GAS„Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ: ${result.message}`);
                throw new Error(`Ê≥®ÊñáÂá¶ÁêÜ„Ç®„É©„Éº: ${result.message}`);
            }

            // ÊàêÂäüÊôÇ„ÅÆÂá¶ÁêÜ
            if (result.status === 'success') {
                debugLog('‚úÖ Ê≥®ÊñáÂá¶ÁêÜÊàêÂäü');
                alert('„ÅîÊ≥®Êñá„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ');
                
                // „Ç´„Éº„Éà„Çí„ÇØ„É™„Ç¢
                cart = [];
                updateCartView();
                
                // LIFF„Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÈñâ„Åò„Çã
                if (liff.isInClient()) {
                    debugLog('üì± LIFF„Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÈñâ„Åò„Åæ„Åô');
                    liff.closeWindow();
                } else {
                    debugLog('üåê „Éñ„É©„Ç¶„Ç∂Áí∞Â¢É„ÅÆ„Åü„ÇÅ„ÄÅ„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅØÈñâ„Åò„Åæ„Åõ„Çì');
                }
            } else {
                debugLog(`‚ùå ‰∫àÊúü„Åó„Å™„ÅÑ„É¨„Çπ„Éù„É≥„ÇπÂΩ¢Âºè: ${JSON.stringify(result)}`);
                throw new Error('‰∫àÊúü„Åó„Å™„ÅÑ„É¨„Çπ„Éù„É≥„ÇπÂΩ¢Âºè„Åß„Åô');
            }

        } catch (error) {
            debugLog(`‚ùå Ê≥®ÊñáÂá¶ÁêÜ„Ç®„É©„Éº: ${error.message}`);
            debugLog(`‚ùå „Ç®„É©„Éº„Çπ„Çø„ÉÉ„ÇØ: ${error.stack}`);
            console.error('Ê≥®ÊñáÂá¶ÁêÜ„Ç®„É©„Éº:', error);
            
            // „É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
            let userMessage = 'Ê≥®ÊñáÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ';
            
            if (error.message.includes('JSON')) {
                userMessage += '\nË©≥Á¥∞: „Ç∑„Çπ„ÉÜ„É†„ÅÆÂøúÁ≠îÂΩ¢Âºè„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ';
            } else if (error.message.includes('Lark API')) {
                userMessage += '\nË©≥Á¥∞: „Éá„Éº„Çø„Éô„Éº„Çπ„Å∏„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ';
            } else if (error.message.includes('FieldNameNotFound')) {
                userMessage += '\nË©≥Á¥∞: „Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆË®≠ÂÆö„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ';
            } else if (error.message.includes('fetch')) {
                userMessage += '\nË©≥Á¥∞: „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ';
            } else {
                userMessage += `\nË©≥Á¥∞: ${error.message}`;
            }
            
            userMessage += '\n\n„ÅäÊâãÊï∞„Åß„Åô„Åå„ÄÅ„ÅäÂ∫ó„Å´Áõ¥Êé•„ÅîÈÄ£Áµ°„Åè„Å†„Åï„ÅÑ„ÄÇ';
            
            alert(userMessage);
            
        } finally {
            // „Éú„Çø„É≥„ÇíÂÖÉ„ÅÆÁä∂ÊÖã„Å´Êàª„Åô
            confirmOrderButton.disabled = false;
            confirmOrderButton.textContent = 'Ê≥®Êñá„ÇíÁ¢∫ÂÆö„Åô„Çã';
            debugLog("üîÑ Ê≥®ÊñáÂá¶ÁêÜÁµÇ‰∫Ü„ÄÅ„Éú„Çø„É≥Áä∂ÊÖã„É™„Çª„ÉÉ„Éà");
        }
    }

    // „ÄêËøΩÂä†„ÄëLINE„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°ÔºàÂèØËÉΩ„Å™Â†¥Âêà„ÅÆ„ÅøÔºâ
    async function sendLineMessageIfPossible(orderData) {
        try {
            debugLog(`üí¨ LINE„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„ÉÅ„Çß„ÉÉ„ÇØ: isApiAvailable=${liff.isApiAvailable('sendMessages')}`);
            
            // LINE„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂÜÖ„ÅßsendMessages„ÅåÂà©Áî®ÂèØËÉΩ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            if (liff.isApiAvailable('sendMessages')) {
                const confirmationMessage = `„ÅîÊ≥®Êñá„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ\n\n---„ÅîÊ≥®ÊñáÂÜÖÂÆπ---\n${orderData.orderDetails}\n\nÂêàË®àÈáëÈ°ç: ${orderData.totalPrice}ÂÜÜ\nÊ≥®ÊñáID: ${orderData.orderId}\n\n„ÅîÊ≥®Êñá„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü„ÄÇÊ∫ñÂÇô„Åå„Åß„Åç„Åæ„Åó„Åü„Çâ„ÄÅÊîπ„ÇÅ„Å¶„ÅîÈÄ£Áµ°„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ`;
                
                debugLog(`üí¨ LINE„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°ÈñãÂßã`);
                await liff.sendMessages([{
                    type: 'text',
                    text: confirmationMessage
                }]);
                
                debugLog('‚úÖ LINE„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü');
            } else {
                debugLog('‚ÑπÔ∏è LINE„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åï„Çå„Åæ„Åó„ÅüÔºàLINE„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂ§ñ„Åæ„Åü„ÅØAPIÂà©Áî®‰∏çÂèØÔºâ');
            }
        } catch (messageError) {
            // „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„ÅÆÂ§±Êïó„ÅØÊ≥®ÊñáÂá¶ÁêÜÂÖ®‰Ωì„ÇíÂÅúÊ≠¢„Åï„Åõ„Å™„ÅÑ
            debugLog(`‚ö†Ô∏è LINE„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„Åå„ÄÅÊ≥®Êñá„ÅØÊ≠£Â∏∏„Å´Âá¶ÁêÜ„Åï„Çå„Åæ„Åó„Åü: ${messageError.message}`);
            console.warn('LINE„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„Åå„ÄÅÊ≥®Êñá„ÅØÊ≠£Â∏∏„Å´Âá¶ÁêÜ„Åï„Çå„Åæ„Åó„Åü:', messageError);
        }
    }

    // „ÄêËøΩÂä†„Äë„Éá„Éê„ÉÉ„Ç∞Áî®ÔºöGAS„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÅÆ„ÉÜ„Çπ„Éà
    async function testGasEndpoint() {
        try {
            debugLog('üß™ GAS„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÉÜ„Çπ„ÉàÈñãÂßã');
            
            const testData = {
                orderId: 'test-' + Date.now(),
                userId: 'test-user',
                displayName: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº',
                orderDetails: '„ÉÜ„Çπ„ÉàÊ≥®Êñá',
                totalPrice: 1000
            };
            
            debugLog(`üß™ „ÉÜ„Çπ„Éà„Éá„Éº„Çø: ${JSON.stringify(testData)}`);
            
            const response = await fetch(GAS_API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(testData)
            });
            
            debugLog(`üß™ „ÉÜ„Çπ„Éà„É¨„Çπ„Éù„É≥„Çπ status: ${response.status}`);
            
            const responseText = await response.text();
            debugLog(`üß™ „ÉÜ„Çπ„Éà„É¨„Çπ„Éù„É≥„Çπ„ÉÜ„Ç≠„Çπ„Éà: ${responseText}`);
            
            const result = JSON.parse(responseText);
            debugLog(`üß™ „Éë„Éº„ÇπÊ∏à„Åø„ÉÜ„Çπ„Éà„É¨„Çπ„Éù„É≥„Çπ: ${JSON.stringify(result)}`);
            
            if (result.status === 'success') {
                debugLog('‚úÖ GAS„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÅØÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô');
                alert('‚úÖ GAS„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÉÜ„Çπ„ÉàÊàêÂäü');
            } else {
                debugLog(`‚ùå GAS„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü: ${result.message}`);
                alert('‚ùå GAS„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÉÜ„Çπ„ÉàÂ§±Êïó: ' + result.message);
            }
            
        } catch (error) {
            debugLog(`‚ùå GAS„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÉÜ„Çπ„Éà„Åß„Ç®„É©„Éº: ${error.message}`);
            console.error('‚ùå GAS„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÉÜ„Çπ„Éà„Åß„Ç®„É©„Éº:', error);
            alert('‚ùå GAS„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÉÜ„Çπ„Éà„Åß„Ç®„É©„Éº: ' + error.message);
        }
    }

    // „Éá„Éê„ÉÉ„Ç∞Áî®„Å´„Ç∞„É≠„Éº„Éê„É´„Å´ÂÖ¨Èñã
    window.testGasEndpoint = testGasEndpoint;
    window.debugLog = debugLog;

    modalCloseButton.addEventListener('click', closeModal);
    modalBackdrop.addEventListener('click', (e) => { if (e.target === modalBackdrop) closeModal(); });
    confirmOrderButton.addEventListener('click', submitOrder);
    
    debugLog("‚úÖ „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆöÂÆå‰∫Ü");
});
